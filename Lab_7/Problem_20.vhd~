library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

---------------------------------------------------------
--REMARK:  Inputs are defined per 20.U on lab document.--
--WARNING: Check naming convention used in this        --
--         declaration to verify that it is the        --
--         same as the *TOP.vhd* for the wrapper.      --
---------------------------------------------------------

entity Product_Sum is
  port(Clk, Rst, Start: in std_logic;
       X,Y: in std_logic_vector(3 downto 0);
       Z: in std_logic_vector(2 downto 0);
       Result: out std_logic_vector(7 downto 0);
       Done: in std_logic);
  end Product_Sum;

architecture Control_Signals of Product_Sum is

  -----------------------
  --Signal Declarations--
  -----------------------

  -- Registers
  signal ACC: std_logic_vector(8 downto 0);
  signal add_4: std_logic_vector(3 downto 0);
  signal add_9: std_logic_vector(8 downto 0);
  
  -- Inputs
  alias M: std_logic is ACC(0);

  -- Output
   ----------------------------
   --Cases for load_which:   --
   -- 0 implies load nothing.--
   -- 1 implies load X.      --
   -- 2 implies load Y.      --
   -- 3 implies load Z.      --
   ----------------------------
  
  signal load_which: integer range 0 to 3;
  signal sl_adder: std_logic; -- sl -> "select"
  signal add, ld, shift: std_logic; -- ld -> "load"

   -- Arithmetic Outputs
  signal add_4_out: std_logic_vector (4 downto 0);  -- running sum of 4-bit adder
  signal add_9_out: std_logic_vector (8 downto 0);  -- running sum of 9-bit adder

  -- Aritmetic Temporary Storage
  signal add_4_temp: std_logic_vector (4 downto 0);
  signal add_9_temp: std_logic_vector (8 downto 0);
  
  -- States
  signal State, Nextstate: integer range 0 to 18;
  

  begin

    ----------------------
    --Signal Assignments--
    ----------------------
    add <= '0'; ld <= '0'; shift <= '0'; 
    add_4_out <= (('0' & ACC(7 downto 4)) + add_4);  -- Needs verification!
    --+

    -------------------------
    --Combinatorial Circuit--
    -------------------------
    
    process (State, Start, Rst, M)
    begin

      case State is

        -- Set sl_adder and iff *start* = 1, then set ld and load_which;
        -- CAUTION: This condition will probably need an update for *RST*.
        when 0 =>
          if Start = '1' then
            ld <= '1'; sl_adder <= '0'; load_which <= 1; Nextstate <= 1;
          else  sl_adder <= '0'; Nextstate <= 0;
          end if;

        -- Sets load_which to 2, ld to 1;
        when 1 =>
          load_which <= 2; Nextstate <= 2; ld <= 1;

        -- Sets load_which to 3, ld to 1;
        when 2 =>
          load_which <= 3; Nextstate <= 3; ld <= 1;

        --------------
        --Symmetries--
        --------------
          
        when 3 | 6 | 9 | 12 =>
          if M = '1' then
            sl_adder <= '0';
            add <= '1';
            Nextstate <= Nextstate + 1;
          else
            ld <= '1'; Nextstate <= Nextstate + 2;
            
          

               
               --+
        end case;
               


               --+
    end process;

    ----------------
    --Control Unit--
    ----------------
      
      --------------------------------------------------------------------
      --REMARKS: Updates all /registers/ on the rising edge of the clock--
      --         and the *State*.                                       --
      --------------------------------------------------------------------
    
    process (Clk)
      begin
        if Clk'event and Clk = '1' then

          if (ld = '1' and load_which = 1) then  -- State == 0
            ACC(8 downto 4) <= "00000";
            ACC(3 downto 0) <= X;
           end if;

          if (ld = '1' and load_which = 2) then  -- State == 1
            add_4 <= Y;
          end if;

          if (ld = '1' and load_which = 3) then  -- State == 2
            add_9(8 downto 5) <= "000000";
            add_9(2 downto 0) <= Z;
          end if;

          --------------
          --Symmetries--
          --------------
          if (sl_adder = '0' and add = '1' and load_which = 0) then
            add_4_temp <= add_4_out;
          end if;

          if (sl_adder = '0' and

            
          State <= Nextstate;
            
        end if;
      end process;
    
end Control_Signals;


